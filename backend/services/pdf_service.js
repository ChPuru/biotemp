const PDFDocument = require('pdfkit');
const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');

const generateAnalysisReport = async (analysisData) => {
    try {
        const doc = new PDFDocument();
        const fileName = `biomapper_report_${Date.now()}.pdf`;
        const filePath = path.join(__dirname, '../reports', fileName);

        // Ensure reports directory exists
        const reportsDir = path.join(__dirname, '../reports');
        try {
            await fs.access(reportsDir);
        } catch {
            await fs.mkdir(reportsDir, { recursive: true });
        }

        const stream = fsSync.createWriteStream(filePath);
            doc.pipe(stream);

            // Header
            doc.fontSize(20).text('BioMapper Lite - Biodiversity Analysis Report', { align: 'center' });
            doc.moveDown();
            doc.fontSize(12).text(`Generated on: ${new Date().toLocaleString()}`, { align: 'center' });
            doc.moveDown(2);

            // Location Information
            if (analysisData.location) {
                doc.fontSize(14).text('Sample Location', { underline: true });
                doc.fontSize(10);
                doc.text(`Latitude: ${analysisData.location.lat}`);
                doc.text(`Longitude: ${analysisData.location.lon}`);
                doc.text(`Address: ${analysisData.location.address}`);
                doc.moveDown();
            }

            // Classification Results
            if (analysisData.classification_results && analysisData.classification_results.length > 0) {
                doc.fontSize(14).text('Classification Results', { underline: true });
                doc.moveDown(0.5);

                analysisData.classification_results.forEach((result, index) => {
                    doc.fontSize(10);
                    doc.text(`${index + 1}. Sequence ID: ${result.Sequence_ID}`);
                    doc.text(`   Predicted Species: ${result.Predicted_Species}`);
                    doc.text(`   Confidence: ${result.Classifier_Confidence}`);
                    doc.text(`   Novelty Score: ${result.Novelty_Score}`);
                    doc.text(`   IUCN Status: ${result.iucn_status || 'Not Evaluated'}`);
                    doc.text(`   Local DB Match: ${result.Local_DB_Match ? 'Yes' : 'No'}`);
                    doc.moveDown(0.5);
                });
            }

            // Biodiversity Metrics
            if (analysisData.biodiversity_metrics) {
                doc.moveDown();
                doc.fontSize(14).text('Biodiversity Assessment', { underline: true });
                doc.fontSize(10);
                doc.text(`Species Richness: ${analysisData.biodiversity_metrics["Species Richness"]}`);
                doc.text(`Shannon Diversity Index: ${analysisData.biodiversity_metrics["Shannon Diversity Index"]}`);
                doc.moveDown();
            }

            // Footer
            doc.fontSize(8).text('Generated by BioMapper Lite - AI-Powered Biodiversity Intelligence Platform', {
                align: 'center',
                opacity: 0.7
            });

            doc.end();

        return new Promise((resolve, reject) => {
            stream.on('finish', () => {
                resolve({
                    status: 'success',
                    fileName: fileName,
                    filePath: filePath,
                    message: 'PDF report generated successfully'
                });
            });

            stream.on('error', (err) => {
                reject({ status: 'error', error: `PDF generation failed: ${err.message}` });
            });
        });

    } catch (error) {
        throw { status: 'error', error: `PDF generation error: ${error.message}` };
    }
};

module.exports = { generateAnalysisReport };