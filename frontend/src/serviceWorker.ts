// frontend/src/serviceWorker.ts
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL, PrecacheEntry } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

declare const self: ServiceWorkerGlobalScope;

// Add missing type definitions
interface ExtendableEvent extends Event {
  waitUntil(f: Promise<any>): void;
}

interface Client {
  id: string;
  type: string;
  url: string;
  postMessage(message: any, transfer?: Transferable[]): void;
}

interface ServiceWorker extends EventTarget {
  scriptURL: string;
  state: string;
}

interface MessagePort {
  postMessage(message: any, transfer?: Transferable[]): void;
  start(): void;
  close(): void;
}

declare global {
  interface ExtendableMessageEvent extends ExtendableEvent {
    data: any;
    source: Client | ServiceWorker | MessagePort | null;
  }

  interface ServiceWorkerGlobalScope {
    __WB_MANIFEST: Array<string | PrecacheEntry>;
    skipWaiting(): Promise<void>;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
  }
}

// Claim clients immediately
clientsClaim();

// Precache all assets generated by webpack
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }: { request: Request; url: URL }) => {
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache images with a cache-first strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache API responses with Network First strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-responses',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Background sync for offline analysis requests
const bgSyncPlugin = new BackgroundSyncPlugin('analysis-queue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 hours (specified in minutes)
});

registerRoute(
  ({ url }) => url.pathname.startsWith('/api/analysis'),
  new NetworkFirst({
    cacheName: 'analysis-requests',
    plugins: [bgSyncPlugin],
  }),
  'POST'
);

// Listen for the 'message' event to handle communication from the client
self.addEventListener('message', (event) => {
  const extEvent = event as ExtendableMessageEvent;
  if (extEvent.data && extEvent.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});